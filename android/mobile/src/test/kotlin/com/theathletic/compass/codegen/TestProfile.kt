package com.theathletic.compass.codegen

import com.theathletic.BuildConfig
import com.theathletic.compass.CompassClient
import com.theathletic.compass.Experiment
import com.theathletic.compass.FieldResponse
import com.theathletic.compass.Variant
import com.theathletic.compass.safeValue
import com.theathletic.debugtools.DebugPreferences
import com.theathletic.utility.logging.ICrashLogHandler
import com.theathletic.user.UserManager
import kotlin.Boolean
import kotlin.Double
import kotlin.Float
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.collections.Map

/**
 * This class was generated by the 'compass' plugin
 */
class TestProfile(
    override var name: String = "profile",
    override var exists: Boolean = false,
    override var activeVariant: Variant? = ProfileVariant.CTRL(),
    override val crashLogHandler: ICrashLogHandler,
    override val debugPreferences: DebugPreferences
) : Experiment() {
  /**
   * Returns the active variant indicated by the server config, or CTRL if not able to obtain a
   * config
   */
  val variant: ProfileVariant
    get() {
      if (client == null || client?.configState?.get() != CompassClient.ConfigState.POPULATED) {
        val exception = IllegalAccessException("""The compass client configState must be POPULATED
          in order to reference a variant""")
        if (BuildConfig.DEBUG) {
          throw exception
        } else {
          crashLogHandler.logException(exception)
        }
      }

      if (debugPreferences.compassSelectedVariantMap[name] != null) {
        return when(debugPreferences.compassSelectedVariantMap[name]) {
          "A" -> ProfileVariant.A()
          "B" -> ProfileVariant.B()
          else -> ProfileVariant.CTRL()
        }
      }

      if (exists) {
        return activeVariant as ProfileVariant
      }

      return ProfileVariant.CTRL()
    }

  override fun copy(activeVariant: Variant, exists: Boolean) = TestProfile(activeVariant =
      activeVariant, exists = exists, crashLogHandler = crashLogHandler, debugPreferences =
      debugPreferences)

  fun postExposure(userId: Long = UserManager.getCurrentUserId()) {
    client?.postExposure(this, userId)
  }

  sealed class ProfileVariant : Variant {
    data class CTRL(
      override val _name: String = "CTRL",
      var product: String = "com.theathletic.annual",
      var message: String = "there is no cow level"
    ) : ProfileVariant() {
      override fun populateFromFieldMap(fieldMap: Map<String, FieldResponse>,
          crashLogHandler: ICrashLogHandler) = CTRL(
      product = fieldMap["product"]?.value ?: product,
      message = fieldMap["message"]?.value ?: message)
    }

    data class A(
      override val _name: String = "A",
      var product: String = "com.theathletic.semi-monthly-android",
      var message: String = "there is no cow level",
      var `package`: Double = 20.0,
      var `object`: Int = 2000,
      var floatPrice: Float = 20.0f,
      var isSpoon: Boolean = true
    ) : ProfileVariant() {
      override fun populateFromFieldMap(fieldMap: Map<String, FieldResponse>,
          crashLogHandler: ICrashLogHandler) = A(
      product = fieldMap["product"]?.value ?: product,
      message = fieldMap["message"]?.value ?: message,
      `package` = safeValue(fieldMap["package"]?.value, `package`, crashLogHandler),
      `object` = safeValue(fieldMap["object"]?.value, `object`, crashLogHandler),
      floatPrice = safeValue(fieldMap["floatPrice"]?.value, floatPrice, crashLogHandler),
      isSpoon = safeValue(fieldMap["isSpoon"]?.value, isSpoon, crashLogHandler))
    }

    data class B(
      override val _name: String = "B",
      var product: String = "com.theathletic.semi-monthly",
      var message: String = "there is no cow level"
    ) : ProfileVariant() {
      override fun populateFromFieldMap(fieldMap: Map<String, FieldResponse>,
          crashLogHandler: ICrashLogHandler) = B(
      product = fieldMap["product"]?.value ?: product,
      message = fieldMap["message"]?.value ?: message)
    }
  }
}
