package com.theathletic.compass.codegen

import com.theathletic.BuildConfig
import com.theathletic.compass.CompassClient
import com.theathletic.compass.Experiment
import com.theathletic.compass.FieldResponse
import com.theathletic.compass.Variant
import com.theathletic.debugtools.DebugPreferences
import com.theathletic.utility.logging.ICrashLogHandler
import com.theathletic.user.UserManager
import kotlin.Boolean
import kotlin.Long
import kotlin.String
import kotlin.collections.Map

/**
 * This class was generated by the 'compass' plugin
 */
class TestPushOptInPrePrompt(
    override var name: String = "Push opt-in pre prompt",
    override var exists: Boolean = false,
    override var activeVariant: Variant? = PushOptInPrePromptVariant.CTRL(),
    override val crashLogHandler: ICrashLogHandler,
    override val debugPreferences: DebugPreferences
) : Experiment() {
  /**
   * Returns the active variant indicated by the server config, or CTRL if not able to obtain a
   * config
   */
  val variant: PushOptInPrePromptVariant
    get() {
      if (client == null || client?.configState?.get() != CompassClient.ConfigState.POPULATED) {
        val exception = IllegalAccessException("""The compass client configState must be POPULATED
          in order to reference a variant""")
        if (BuildConfig.DEBUG) {
          throw exception
        } else {
          crashLogHandler.logException(exception)
        }
      }

      if (debugPreferences.compassSelectedVariantMap[name] != null) {
        return when(debugPreferences.compassSelectedVariantMap[name]) {
          "A" -> PushOptInPrePromptVariant.A()
          "B" -> PushOptInPrePromptVariant.B()
          else -> PushOptInPrePromptVariant.CTRL()
        }
      }

      if (exists) {
        return activeVariant as PushOptInPrePromptVariant
      }

      return PushOptInPrePromptVariant.CTRL()
    }

  override fun copy(activeVariant: Variant, exists: Boolean) = TestPushOptInPrePrompt(activeVariant
      = activeVariant, exists = exists, crashLogHandler = crashLogHandler, debugPreferences =
      debugPreferences)

  fun postExposure(userId: Long = UserManager.getCurrentUserId()) {
    client?.postExposure(this, userId)
  }

  sealed class PushOptInPrePromptVariant : Variant {
    data class CTRL(
      override val _name: String = "CTRL"
    ) : PushOptInPrePromptVariant() {
      override fun populateFromFieldMap(fieldMap: Map<String, FieldResponse>,
          crashLogHandler: ICrashLogHandler) = CTRL(
      )
    }

    data class A(
      override val _name: String = "A"
    ) : PushOptInPrePromptVariant() {
      override fun populateFromFieldMap(fieldMap: Map<String, FieldResponse>,
          crashLogHandler: ICrashLogHandler) = A(
      )
    }

    data class B(
      override val _name: String = "B"
    ) : PushOptInPrePromptVariant() {
      override fun populateFromFieldMap(fieldMap: Map<String, FieldResponse>,
          crashLogHandler: ICrashLogHandler) = B(
      )
    }
  }
}
