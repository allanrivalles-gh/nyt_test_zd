package com.theathletic.compass.codegen

import com.theathletic.BuildConfig
import com.theathletic.compass.CompassClient
import com.theathletic.compass.Experiment
import com.theathletic.compass.FieldResponse
import com.theathletic.compass.Variant
import com.theathletic.compass.safeValue
import com.theathletic.debugtools.DebugPreferences
import com.theathletic.user.UserManager
import com.theathletic.utility.logging.ICrashLogHandler
import kotlin.Boolean
import kotlin.Long
import kotlin.String
import kotlin.collections.Map

/**
 * This class was generated by the 'compass' plugin
 */
class HomeAdsV2(
    override var name: String = "Home Ads v2",
    override var exists: Boolean = false,
    override var activeVariant: Variant? = null,
    override val crashLogHandler: ICrashLogHandler,
    override val debugPreferences: DebugPreferences
) : Experiment() {
    /**
     * Returns the active variant indicated by the server config, or CTRL if not able to obtain a
     * config
     */
    val variant: HomeAdsV2Variant
        get() {
            if (client == null || client?.configState?.get() != CompassClient.ConfigState.POPULATED) {
                val exception = IllegalAccessException("""The compass client configState must be POPULATED
          in order to reference a variant""")
                if (BuildConfig.DEBUG) {
                    throw exception
                } else {
                    crashLogHandler.logException(exception)
                }
            }

            if (debugPreferences.compassSelectedVariantMap[name] != null) {
                return when(debugPreferences.compassSelectedVariantMap[name]) {
                    "A" -> HomeAdsV2Variant.A()
                    else -> HomeAdsV2Variant.CTRL()
                }
            }

            if (exists) {
                return activeVariant as HomeAdsV2Variant
            }

            return HomeAdsV2Variant.CTRL()
        }

    override fun copy(activeVariant: Variant, exists: Boolean) = HomeAdsV2(
        activeVariant = activeVariant,
        exists = exists,
        crashLogHandler = crashLogHandler,
        debugPreferences = debugPreferences
    )

    fun postExposure(userId: Long = UserManager.getCurrentUserId()) {
        client?.postExposure(this, userId)
    }

    sealed class HomeAdsV2Variant(shouldExpose: Boolean) : Variant {

        data class CTRL(
            override val _name: String = "CTRL",
            val shouldExpose: Boolean = false
        ) : HomeAdsV2Variant(shouldExpose) {
            override fun populateFromFieldMap(fieldMap: Map<String, FieldResponse>, crashLogHandler: ICrashLogHandler) = CTRL(
                shouldExpose = safeValue(fieldMap["should_expose"]?.value, shouldExpose, crashLogHandler)
            )
        }

        data class A(
            public override val _name: String = "A",
            val shouldExpose: Boolean = false
        ) : HomeAdsV2Variant(shouldExpose) {
            override fun populateFromFieldMap(fieldMap: Map<String, FieldResponse>, crashLogHandler: ICrashLogHandler) = A(
                shouldExpose = safeValue(fieldMap["should_expose"]?.value, shouldExpose, crashLogHandler)
            )
        }
    }
}
