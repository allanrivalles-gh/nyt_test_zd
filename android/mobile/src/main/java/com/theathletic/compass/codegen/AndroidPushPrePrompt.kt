package com.theathletic.compass.codegen

import com.theathletic.BuildConfig
import com.theathletic.compass.CompassClient
import com.theathletic.compass.Experiment
import com.theathletic.compass.FieldResponse
import com.theathletic.compass.Variant
import com.theathletic.debugtools.DebugPreferences
import com.theathletic.user.UserManager
import com.theathletic.utility.logging.ICrashLogHandler
import kotlin.Boolean
import kotlin.Long
import kotlin.String
import kotlin.Unit
import kotlin.collections.Map

/**
 * This class was generated by the 'compass' plugin
 */
public class AndroidPushPrePrompt(
  public override var name: String = "Android Push Pre Prompt",
  public override var exists: Boolean = false,
  public override var activeVariant: Variant? = null,
  public override val crashLogHandler: ICrashLogHandler,
  public override val debugPreferences: DebugPreferences
) : Experiment() {
  /**
   * Returns the active variant indicated by the server config, or CTRL if not able to obtain a
   * config
   */
  public val variant: AndroidPushPrePromptVariant
    get() {
      if (client == null || client?.configState?.get() != CompassClient.ConfigState.POPULATED) {
        val exception = IllegalAccessException("""The compass client configState must be POPULATED
          in order to reference a variant""")
        if (BuildConfig.DEBUG) {
          throw exception
        } else {
          crashLogHandler.logException(exception)
        }
      }

      if (debugPreferences.compassSelectedVariantMap[name] != null) {
        return when(debugPreferences.compassSelectedVariantMap[name]) {
          "A" -> AndroidPushPrePromptVariant.A()
          else -> AndroidPushPrePromptVariant.CTRL()
        }
      }

      if (exists) {
        return activeVariant as AndroidPushPrePromptVariant
      }

      return AndroidPushPrePromptVariant.CTRL()
    }

  public override fun copy(activeVariant: Variant, exists: Boolean) =
      AndroidPushPrePrompt(activeVariant = activeVariant, exists = exists, crashLogHandler =
      crashLogHandler, debugPreferences = debugPreferences)

  public fun postExposure(userId: Long = UserManager.getCurrentUserId()): Unit {
    client?.postExposure(this, userId)
  }

  public sealed class AndroidPushPrePromptVariant : Variant {
    public data class CTRL(
      public override val _name: String = "CTRL",
      public var title: String = "You'll need to turn on Push",
      public var subtitle: String =
          "In order to fully experience The Athletic, you'll need to turn on notifications."
    ) : AndroidPushPrePromptVariant() {
      public override fun populateFromFieldMap(fieldMap: Map<String, FieldResponse>,
          crashLogHandler: ICrashLogHandler) = CTRL(
      title = fieldMap["title"]?.value ?: title,
      subtitle = fieldMap["subtitle"]?.value ?: subtitle)
    }

    public data class A(
      public override val _name: String = "A",
      public var title: String = "Enable push to stay updated",
      public var subtitle: String =
          "Allow notifications to get customizable breaking news, story and score alerts"
    ) : AndroidPushPrePromptVariant() {
      public override fun populateFromFieldMap(fieldMap: Map<String, FieldResponse>,
          crashLogHandler: ICrashLogHandler) = A(
      title = fieldMap["title"]?.value ?: title,
      subtitle = fieldMap["subtitle"]?.value ?: subtitle)
    }
  }
}
