import java.util.Properties

val versionProps = Properties().apply {
    load(
        File("${project.rootDir}/mobile/version.properties").inputStream()
    )
}

val VERSION_MAJOR = versionProps.getProperty("version.major")
val VERSION_MINOR = versionProps.getProperty("version.minor")
val VERSION_PATCH = versionProps.getProperty("version.patch")

plugins {
    id(Plugins.application)
    id("kotlin-android")
    id("kotlin-parcelize")
    id("com.google.firebase.crashlytics")
    id("com.google.firebase.firebase-perf")
    id("embrace-swazzler")
    id("androidx.navigation.safeargs")
    id("kotlin-kapt")
    id(Plugins.hilt)
    id(Plugins.athletic_compose)
    id(Plugins.athletic_test)
    id(Plugins.kover)
}

kapt {
    javacOptions {
        option("-Xmaxerrs", 10000)
    }
}

android {
    namespace = "com.theathletic"
    compileSdk = Versions.compileSdk

    variantFilter {
        if (this.name == "releaseTestDebug") {
            ignore = true
        }
    }

    kotlinOptions {
        jvmTarget = Versions.jvmTarget
        freeCompilerArgs = listOf(
            "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi",
            "-Xuse-experimental=kotlin.Experimental",
            "-Xjvm-default=compatibility"
        )
    }

    useLibrary("android.test.runner")
    useLibrary("android.test.base")
    useLibrary("android.test.mock")

    testBuildType = "release"

    defaultConfig {
        applicationId = "com.theathletic"
        targetSdk = Versions.targetSdk
        minSdk = Versions.minSdk
        // versionCode is generated by CI build process
        versionCode = 1
        versionName = "$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH"
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        firebaseCrashlytics {
            mappingFileUploadEnabled = false
        }
    }

    compileOptions {
        sourceCompatibility = Versions.compatibilitySource
        targetCompatibility = Versions.compatibilitySource
        isCoreLibraryDesugaringEnabled = true
    }

    signingConfigs {
        getByName("debug") {
            val signInValues = debugSignInValues()
            storeFile = signInValues.storeFile
            storePassword = signInValues.storePassword
            keyAlias = signInValues.keyAlias
            keyPassword = signInValues.keyPassword
        }

        create("release") {
            val signingValues = releaseSigningValues()
            storeFile = signingValues.storeFile
            storePassword = signingValues.storePassword
            keyAlias = signingValues.keyAlias
            keyPassword = signingValues.keyPassword
            enableV1Signing = true
            enableV2Signing = true
        }
    }

    lint {
        lintConfig = file("lint.xml")
        htmlReport = true
        checkDependencies = true
        warningsAsErrors = true
        checkDependencies = true
        baseline = file("lint-baseline.xml")
    }

    productFlavors {
        getByName("dev") {
            buildConfigField("boolean", "DEBUG_TOOLS_ENABLED", "true")
            applicationIdSuffix = ".dev"
        }
        getByName("prod") {
            buildConfigField("boolean", "DEBUG_TOOLS_ENABLED", "false")
        }
        // Equivalent of prodRelease but with the same package name as prodRelease so we can test
        // payments, SSO, or 3rd party OAuth in addition to having debug tools enabled by
        // default
        getByName("releaseTest") {
            buildConfigField("boolean", "DEBUG_TOOLS_ENABLED", "true")
        }
    }

    buildTypes {
        val debug by getting {
            buildConfigField("boolean", "LOGS", "true")
            buildConfigField("boolean", "IS_EXCEPTION_TRACKING_ENABLED", "false")
            buildConfigField("boolean", "DEBUG_TOOLS_ENABLED", "true")
            signingConfig = signingConfigs.getByName("debug")
            applicationIdSuffix = ".debug"
            isDebuggable = true
            isMinifyEnabled = false
            isShrinkResources = false
            ext.set("enableCrashlytics", false)
            ext.set("alwaysUpdateBuildId", false)
            aaptOptions.cruncherEnabled = false
            withGroovyBuilder {
                "FirebasePerformance" {
                    invokeMethod("setInstrumentationEnabled", false)
                }
            }
        }

        val release by getting {
            buildConfigField("boolean", "LOGS", "false")
            buildConfigField("boolean", "IS_EXCEPTION_TRACKING_ENABLED", "true")
            signingConfig = signingConfigs.getByName("release")
            isDebuggable = false
            isMinifyEnabled = true
            isShrinkResources = true
            proguardFiles(
                getDefaultProguardFile("proguard-android.txt"),
                "proguard-rules.pro"
            )
            testProguardFiles(*fileTree(mapOf("dir" to ".", "include" to listOf("*.pro"))).toList().toTypedArray())
            firebaseCrashlytics {
                mappingFileUploadEnabled = true
            }
            ndk.debugSymbolLevel = "FULL"
        }
    }

    sourceSets {
        val main by getting
        main.java.srcDir("src/main/kotlin")
        getByName("test").java.srcDir("src/test/kotlin")
        getByName("androidTest").java.srcDir("src/androidTest/java")
    }

    buildFeatures {
        viewBinding = true
        dataBinding = true
        aidl = true
    }

    packagingOptions {
        resources.excludes.add("META-INF/rxjava.properties")
        resources.excludes.add("META-INF/AL2.0")
        resources.excludes.add("META-INF/LGPL2.1")
        resources.excludes.add("META-INF/LICENSE.md")
        resources.excludes.add("META-INF/LICENSE-notice.md")
    }
}

hilt {
    enableAggregatingTask = false
}

kover{
    useJacoco()
}

dependencies {
    implementation(project(":core"))
    implementation(project(":data"))
    implementation(project(":entity"))
    implementation(project(":api"))
    implementation(project(":db"))
    implementation(project(":analytics"))
    implementation(project(":ads"))
    implementation(project(":ui"))
    implementation(project(":scores:boxscore"))
    implementation(project(":lib:audio"))
    implementation(project(":brackets"))
    implementation(project(":podcast"))
    implementation(project(":scores"))
    implementation(project(":followables"))
    implementation(project(":feed"))
    implementation(project(":comments"))
    implementation(project(":reader"))
    implementation(project(":hub"))
    implementation(project(":hub:game"))
    implementation(project(":billing"))
    implementation(project(":profile"))
    implementation(project(":links"))
    implementation(project(":featureintro"))
    implementation(project(":location"))
    implementation(project(":slidestories"))

    implementation(Dependencies.Kotlin.stdlib)

    // AndroidX libs
    implementation(Dependencies.Android.appcompat)
    implementation(Dependencies.Android.cardview)
    implementation(Dependencies.Android.core)
    implementation(Dependencies.Android.collection)
    implementation(Dependencies.Android.browser)
    implementation(Dependencies.Android.constraintlayout)
    implementation(Dependencies.Android.viewpager)
    implementation(Dependencies.Android.swiperefreshlayout)
    implementation(Dependencies.Android.concurrent)
    implementation(Dependencies.Android.media)
    implementation(Dependencies.Android.webkit)
    implementation(Dependencies.Android.fragment)
    implementation(Dependencies.Android.recyclerview)

    implementation(Dependencies.Compose.navigation)

    implementation("androidx.profileinstaller:profileinstaller:1.3.1")

    // Firebase stuff
    implementation(platform(Dependencies.Firebase.platform))
    implementation(Dependencies.Firebase.crashlytics)
    implementation(Dependencies.Firebase.analytics)
    implementation(Dependencies.Firebase.config)
    implementation(Dependencies.Firebase.messaging)
    implementation(Dependencies.Firebase.performance)
    implementation(Dependencies.Firebase.rxfirebasekotlin)
    implementation(Dependencies.Firebase.rxfirebase)

    // Retrofit
    implementation(Dependencies.Retrofit.okhttp)
    implementation(Dependencies.Retrofit.logging)
    implementation(Dependencies.Retrofit.retrofit)
    implementation(Dependencies.Retrofit.converter)
    implementation(Dependencies.Retrofit.rxjava)

    // Helu + Alfonz
    implementation("cz.helu.android:helubottombuttonsheet:2.1.1")
    implementation("org.alfonz:alfonz-adapter:0.9.0")
    implementation("org.alfonz:alfonz-view:0.9.0")

    // ExoPlayer
    implementation(Dependencies.Exoplayer.core)
    implementation(Dependencies.Exoplayer.ui)
    implementation(Dependencies.Exoplayer.hls)

    // Glide
    implementation(Dependencies.Glide.glide)
    implementation(Dependencies.Glide.okhttp)
    kapt(Dependencies.Glide.compiler)

    // Kotlin coroutines
    implementation(Dependencies.Coroutine.core)
    implementation(Dependencies.Coroutine.android)
    implementation(Dependencies.Coroutine.rx)

    // Rx
    implementation(Dependencies.RxJava.debug)
    implementation(Dependencies.RxJava.android)
    implementation(Dependencies.RxJava.rxjava)
    implementation(Dependencies.RxJava.rxkotlin)

    // Koin
    // Koin AndroidX Scope, ViewModel, Fragment feature
    implementation(Dependencies.Koin.android)
    implementation(Dependencies.Koin.core)
    implementation(Dependencies.Koin.compose)

    implementation(Dependencies.Hilt.core)
    kapt(Dependencies.Hilt.compiler)

    // Lifecycle
    implementation(Dependencies.Lifecycle.viewmodel)
    implementation(Dependencies.Lifecycle.livedata)
    implementation(Dependencies.Lifecycle.runtime)
    implementation(Dependencies.Lifecycle.savedState)
    kapt(Dependencies.Lifecycle.compiler)

    // Workmanager
    implementation(Dependencies.WorkManager.runtime)
    implementation(Dependencies.WorkManager.rxJava)
    implementation(Dependencies.WorkManager.testing)

    // Analytics Annotation Processing
    implementation(project(":annotation"))
    kapt(project(":codegen"))

    implementation(Dependencies.Moshi.moshi)
    implementation(Dependencies.Moshi.moshi_adapters)
    kapt(Dependencies.Moshi.moshi_codegen)

    implementation(Dependencies.Iterable.iterableApi)

    // Others
    implementation("com.github.razir.progressbutton:progressbutton:2.0.0")
    implementation("com.google.android:flexbox:1.0.0")
    implementation("com.google.android.material:material:1.3.0")
    implementation("com.google.code.gson:gson:2.8.5")
    implementation("me.saket:better-link-movement-method:2.2.0")
    implementation("ru.rambler.android:swipe-layout:1.0.15")
    implementation("com.jakewharton.rxrelay2:rxrelay:2.1.0")
    implementation("com.airbnb.android:lottie:3.4.0")

    // Kochava tracking, ADID collection and Install Referrer
    implementation(Dependencies.Kochava.tracker)
    implementation(Dependencies.Kochava.events)
    implementation(Dependencies.PlayServices.play_services_ads_identifier)
    implementation(Dependencies.Android.install_referrer)
    implementation(Dependencies.Comscore.tracker)
    implementation(Dependencies.Datadog.datadog)
    implementation(Dependencies.Datadog.timber)

    // Billing
    implementation(Dependencies.Billing.billingClient)

    // Play Core
    implementation("com.google.android.play:core:1.8.0")
    implementation("com.google.android.play:core-ktx:1.8.0")
    implementation("com.google.android.gms:play-services-base:18.0.1")

    // Libs
    implementation("com.github.chrisbanes:PhotoView:2.1.4")
    implementation("com.jakewharton.timber:timber:4.7.1")
    implementation("com.mlykotom:valifi:1.3.4")
    implementation("com.ToxicBakery.viewpager.transforms:view-pager-transforms:1.3.7@aar")

    // Compose
    implementation(Dependencies.Compose.activity)
    implementation(Dependencies.Compose.viewbinding)
    implementation(Dependencies.Compose.viewmodel)

    // Accompanist
    implementation(Dependencies.Compose.swiperefresh)
    implementation(Dependencies.Compose.pager)
    implementation(Dependencies.Compose.pageIndicator)
    implementation(Dependencies.Compose.insets)
    implementation(Dependencies.Compose.insetsui)
    implementation(Dependencies.Compose.placeholder)

    // Transcend
    implementation(Dependencies.Transcend.transcendApi)

    // Flipper
    debugImplementation("com.facebook.flipper:flipper:0.141.0")
    debugImplementation("com.facebook.soloader:soloader:0.10.3")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:0.141.0")

    implementation(Dependencies.Kotlin.stdlib)

    coreLibraryDesugaring(Dependencies.Android.core_desugar)

    implementation(fileTree(mapOf("dir" to "libs", "include" to listOf("*.jar", "*.aar"))))
}

ktlint {
    android.set(true)
    disabledRules.addAll("max-line-length", "curly-spacing")
    reporters {
        customReporters {
            register("html") {
                fileExtension = "html"
                dependency = "me.cassiano:ktlint-html-reporter:0.2.3"
            }
        }
    }
    filter {
        exclude("**/generated/**")
        exclude("**/CompassExperiment.kt")
        exclude("**/CompassTestExperiment.kt")
        exclude("**/codegen/**")
        exclude("codegen/**")
        include("**/kotlin/**")
    }
}

data class SignInValues(
    val storeFile: File,
    val storePassword: String,
    val keyAlias: String,
    val keyPassword: String
) {
    val isValid: Boolean = storePassword != MISSING && keyAlias != MISSING && keyPassword != MISSING

    companion object {
        val MISSING = "MISSING"
    }
}

fun releaseSigningValues(): SignInValues {
    val releaseSignInValues = SignInValues(
        storeFile = File(System.getenv("HOME") + "/keystores/my_keystore.jks"),
        storePassword = System.getenv("BITRISEIO_ANDROID_KEYSTORE_PASSWORD") ?: SignInValues.MISSING,
        keyAlias = System.getenv("BITRISEIO_ANDROID_KEYSTORE_ALIAS") ?: SignInValues.MISSING,
        keyPassword = System.getenv("BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD") ?: SignInValues.MISSING
    )

    return if (releaseSignInValues.isValid) releaseSignInValues else debugSignInValues()
}

fun debugSignInValues() = SignInValues(
    storeFile = rootProject.file("extras/keystore/theathleticdebug.keystore"),
    storePassword = "android",
    keyAlias = "androiddebugkey",
    keyPassword = "android"
)

apply(mapOf("plugin" to "com.google.gms.google-services"))