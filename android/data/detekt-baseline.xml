<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>ComplexMethod:FeedRemoteToLocalMappers.kt$@Suppress("ReturnCount") fun Consumable.toEntities( curatedFields: CuratedFields ): List&lt;AthleticEntity></ID>
    <ID>ComplexMethod:FeedRemoteToLocalMappers.kt$private fun FeedQuery.Layout.toLocalModel( feedId: String, feedSlug: String?, feedSportType: String?, feedLeagueName: String?, pageIndex: Int, page: Int, hasNextPage: Boolean ): FeedItem?</ID>
    <ID>ComplexMethod:GameDetailRemoteToLocalMappers.kt$fun GameStat.toLocalStats(filter: GameStatGroup? = null): GameDetailLocalModel.Statistic?</ID>
    <ID>ComplexMethod:GameDetailRemoteToLocalMappers.kt$private fun GameOddsMarketFragment.toGameOdds(): GameDetailLocalModel.GameOdds?</ID>
    <ID>ComplexMethod:GameDetailRemoteToLocalMappers.kt$private fun GameSummary.toLocalModel(): GameSummaryLocalModel?</ID>
    <ID>ComplexMethod:NewsResponseMappers.kt$@Suppress("LongMethod") private fun mapApolloNewsContentsToContents(newsContent: NewsItem): ArrayList&lt;NewsContent>?</ID>
    <ID>LongMethod:FeedRemoteToLocalMappers.kt$@Suppress("ReturnCount") fun Consumable.toEntities( curatedFields: CuratedFields ): List&lt;AthleticEntity></ID>
    <ID>LongMethod:FeedRemoteToLocalMappers.kt$private fun FeedQuery.Layout.toLocalModel( feedId: String, feedSlug: String?, feedSportType: String?, feedLeagueName: String?, pageIndex: Int, page: Int, hasNextPage: Boolean ): FeedItem?</ID>
    <ID>LongMethod:GameDetailRemoteToLocalMappers.kt$fun GameStat.toLocalStats(filter: GameStatGroup? = null): GameDetailLocalModel.Statistic?</ID>
    <ID>LongMethod:GameDetailRemoteToLocalMappers.kt$fun Position?.toLocal(): PlayerPosition</ID>
    <ID>LongMethod:GameDetailRemoteToLocalMappers.kt$private fun GameSummary.toLocalModel(): GameSummaryLocalModel?</ID>
    <ID>LongParameterList:ArticleRepository.kt$ArticleRepository$( dispatcherProvider: DispatcherProvider, private val articleFetcher: SingleArticleFetcher, private val savedStoryFetcher: SavedStoriesFetcher, private val entityDataSource: EntityDataSource, private val entityQueries: EntityQueries, private val bookmarkArticleRequest: BookmarkArticleRequest, private val userDataRepository: IUserDataRepository, private val articleRatingFetcher: ArticleRatingFetcher, private val articleReadFetcher: ArticleReadFetcher )</ID>
    <ID>LongParameterList:ChatRepository.kt$ChatRepository$( dispatcherProvider: DispatcherProvider, private val entityDataSource: EntityDataSource, private val chatEventsSubscriber: ChatEventsSubscriber, private val chatMessageSender: ChatMessageSender, private val chatMessageDeleter: ChatMessageDeleter, private val chatMessageReporter: ChatMessageReporter, )</ID>
    <ID>LongParameterList:CommentsRepository.kt$CommentsRepository$( dispatcherProvider: DispatcherProvider, private val commentsApi: CommentsApi, private val headlineCommentsFetcher: HeadlineCommentsFetcher, private val briefCommentsFetcher: BriefCommentsFetcher, private val commentsDataSource: CommentsLocalDataStore, private val entityDataSource: EntityDataSource, private val articleLikeCommentFetcher: ArticleLikeCommentFetcher, private val articleUnlikeCommentFetcher: ArticleUnlikeCommentFetcher, private val articleDeleteCommentFetcher: ArticleDeleteCommentFetcher, private val articleFlagCommentFetcher: ArticleFlagCommentFetcher, private val articleCommentsFetcher: ArticleCommentsFetcher, private val podcastEpisodeCommentsFetcher: PodcastEpisodeCommentsFetcher, private val discussionCommentsFetcher: DiscussionCommentsFetcher, private val gameCommentsFetcher: GameCommentsFetcher, private val qandaCommentsFetcher: QandaCommentsFetcher, private val qandaNewCommentDataStore: QandaNewCommentDataStore, private val qandaNewCommentSubscriber: QandaNewCommentSubscriber )</ID>
    <ID>LongParameterList:FeedFetcher.kt$FeedFetcher$( dispatcherProvider: DispatcherProvider, private val feedApi: FeedGraphqlApi, private val userManager: IUserManager, private val feedPreferences: FeedPreferences, private val timeProvider: TimeProvider, private val feedLocalDataSource: FeedLocalDataSource, private val entityDataSource: EntityDataSource, private val podcastDao: PodcastDao, private val featureSwitch: Features, private val crashLogHandler: ICrashLogHandler )</ID>
    <ID>LongParameterList:FeedRemoteToLocalMappers.kt$( briefs: List&lt;FeedQuery.Content2>, title: String, feedId: String, feedSlug: String?, id: String, pageIndex: Int, page: Int, action: FeedItemAction?, container: String?, hasNextPage: Boolean = true )</ID>
    <ID>LongParameterList:FeedRemoteToLocalMappers.kt$( feedId: String, feedSlug: String?, feedSportType: String?, feedLeagueName: String?, pageIndex: Int, page: Int, hasNextPage: Boolean )</ID>
    <ID>LongParameterList:FeedRepository.kt$FeedRepository$( private val feedLocalDataSource: FeedLocalDataSource, private val entityDataSource: EntityDataSource, private val authorDetailFetcher: AuthorDetailFetcher, private val authorDetailLocalDataSource: AuthorDetailLocalDataSource, private val userManager: IUserManager, dispatcherProvider: DispatcherProvider, private val feedFetcher: FeedFetcher )</ID>
    <ID>LongParameterList:FollowableRepository.kt$FollowableRepository$( dispatcherProvider: DispatcherProvider, private val followableItemsFetcher: FollowableItemsFetcherV2, private val userFollowingFetcher: UserFollowingFetcher, private val followableFetcher: FollowableFetcher, private val unfollowFetcher: UnfollowFetcher, private val userFollowableDao: UserFollowableDao, private val preferences: IPreferences, private val supportedLeagues: SupportedLeagues )</ID>
    <ID>LongParameterList:ListenFeedDataFetcher.kt$ListenFeedDataFetcher$( dispatcherProvider: DispatcherProvider, private val audioApi: AudioApi, private val entityDataSource: EntityDataSource, private val listenFeedDataSource: ListenFeedDataLocalDataSource, private val podcastDao: PodcastDao, private val currentLiveRoomsDataSource: CurrentLiveRoomsLocalDataSource, )</ID>
    <ID>LongParameterList:ListenFeedRepository.kt$ListenFeedRepository$( private val dispatcherProvider: DispatcherProvider, private val entityDataSource: EntityDataSource, private val currentLiveRoomsFetcher: CurrentLiveRoomsFetcher, private val currentLiveRoomsDataSource: CurrentLiveRoomsLocalDataSource, private val listenFeedDataFetcher: ListenFeedDataFetcher, private val listenFeedDataSource: ListenFeedDataLocalDataSource, )</ID>
    <ID>LongParameterList:LiveRoomCreationRepository.kt$LiveRoomCreationRepository$( dispatcherProvider: DispatcherProvider, private val tagsDataSource: LiveRoomTagOptionsLocalDataSource, private val tagsFetcher: LiveRoomTagOptionsFetcher, private val hostsDataSource: LiveRoomHostOptionsLocalDataSource, private val hostsFetcher: LiveRoomHostOptionsFetcher, private val createLiveRoomFetcher: CreateLiveRoomFetcher, private val updateLiveRoomFetcher: UpdateLiveRoomFetcher, )</ID>
    <ID>LongParameterList:RealtimeRepository.kt$RealtimeRepository$( private val realTimeApi: RealtimeApi, dispatcherProvider: DispatcherProvider, private val realTimeDataSource: RealTimeLocalDataSource, private val realtimeFeedFetcher: RealtimeFeedFetcher, private val storyHeadlineItemFetcher: StoryHeadlineItemFetcher, private val storyBriefItemFetcher: StoryBriefItemFetcher, private val entityDataSource: EntityDataSource )</ID>
    <ID>LongParameterList:RealtimeTopicFetcher.kt$RealtimeTopicFetcher$( private val realtimeApi: RealtimeApi, private val metaDataLocalSource: TopicMetaDataLocalDataSource, private val contentPagingLocalSource: TopicContentLocalDataSource, private val realtimePreferences: RealtimePreferences, private val timeProvider: TimeProvider, dispatcherProvider: DispatcherProvider )</ID>
    <ID>LongParameterList:RoomsRepository.kt$RoomsRepository$( dispatcherProvider: DispatcherProvider, private val tokenFetcher: RoomsTokenFetcher, private val userManager: IUserManager, private val tokenLocalStorage: RoomsTokenLocalStorage, private val entityDataSource: EntityDataSource, private val roomFetcher: LiveAudioRoomDetailFetcher, private val roomDetailSubscriber: LiveRoomDetailSubscriber, private val roomStartFetcher: StartLiveRoomFetcher, private val roomEndFetcher: EndLiveRoomFetcher, private val userDetailsDataSource: LiveAudioRoomUserDetailsDataSource, private val createSpeakingRequestFetcher: CreateSpeakingRequestFetcher, private val deleteSpeakingRequestFetcher: DeleteSpeakingRequestFetcher, private val updateSpeakingRequestFetcher: UpdateSpeakingRequestFetcher, private val createDemotionRequestFetcher: CreateDemotionRequestFetcher, private val deleteDemotionRequestFetcher: DeleteDemotionRequestFetcher, private val createMuteRequestFetcher: CreateMuteRequestFetcher, private val deleteMuteRequestFetcher: DeleteMuteRequestFetcher, private val scheduledLiveRoomsFetcher: ScheduledLiveRoomsFetcher, private val userFollowingFetcher: LiveRoomUserFollowingFetcher, private val lockUserMutator: LiveRoomLockUserMutator, private val unlockUserMutator: LiveRoomUnlockUserMutator, private val followingDataSource: LiveAudioRoomUserFollowingDataSource, private val scheduledLiveRoomsDataSource: ScheduledLiveRoomsDataSource, )</ID>
    <ID>LongParameterList:ScoresRepository.kt$ScoresRepository$( dispatcherProvider: DispatcherProvider, private val scoresNavigationFetcher: ScoresNavigationFetcher, private val gameAmericanFootballFetcher: GameAmericanFootballFetcher, private val gameBasketballFetcher: GameBasketballFetcher, private val gameHockeyFetcher: GameHockeyFetcher, private val gameBaseballFetcher: GameBaseballFetcher, private val gameSoccerFetcher: GameSoccerFetcher, private val gameDetailsFetcher: GameDetailsFetcher, private val gameSummaryFetcher: GameSummaryFetcher, private val gameSummarySubscriber: GameSummarySubscriber, private val leagueSeasonFetcher: LeagueSeasonFetcher, private val leagueWeekFetcher: LeagueWeekFetcher, private val leagueDayFetcher: LeagueDayFetcher, private val teamScheduleFetcher: TeamScheduleFetcher, private val seasonLocalDataSource: ScoresSeasonLocalDataSource, private val periodLocalDataSource: ScoresSeasonPeriodLocalDataSource, private val americanFootballGameUpdatesSubscriber: AmericanFootballGameUpdatesSubscriber, private val basketballGameUpdatesSubscriber: BasketballGameUpdatesSubscriber, private val baseballGameUpdatesSubscriber: BaseballGameUpdatesSubscriber, private val baseballPlayerStatsUpdatesSubscriber: BaseballPlayerStatsUpdatesSubscriber, private val hockeyGameUpdatesSubscriber: HockeyGameUpdatesSubscriber, private val soccerGameUpdatesSubscriber: SoccerGameUpdatesSubscriber, private val gamePlayerStatsUpdatesUpdatesSubscriber: GamePlayerStatsUpdatesSubscriber, private val gameFeedFetcher: GameFeedFetcher, private val gamePlayerStatsFetcher: PlayerStatsFetcher, private val baseballStatsFetcher: BaseballStatsFetcher, private val standingsFetcher: ScoresStandingsFetcher, private val gameArticlesFetcher: GameArticlesFetcher, private val gameArticlesLocalDataSource: GameArticlesLocalDataSource, private val todaysGamesFetcher: TodaysGamesFetcher, private val todaysGamesLocalDataSource: TodaysGamesLocalDataSource, private val localDataSource: GameDetailLocalDataSource, private val gameSummaryLocalDataSource: GameSummaryLocalDataSource, private val standingsLocalDataSource: ScoresStandingsLocalDataSource, private val lineUpLocalDataSource: LineUpAndStatsLocalDataSource, private val teamDetailsFetcher: TeamDetailsFetcher, private val basketballPlayByPlaysFetcher: BasketballPlayByPlaysFetcher, private val basketballPlayByPlaysSubscriber: BasketballPlayByPlaysSubscriber, private val hockeyPlayByPlaysFetcher: HockeyPlayByPlaysFetcher, private val hockeyPlayByPlaysSubscriber: HockeyPlayByPlaysSubscriber, private val baseballPlayByPlaysFetcher: BaseballPlayByPlaysFetcher, private val baseballPlayByPlaysSubscriber: BaseballPlayByPlaysSubscriber, private val americanFootballPlayByPlaysFetcher: AmericanFootballPlayByPlaysFetcher, private val americanFootballPlayByPlaysSubscriber: AmericanFootballPlayByPlaysSubscriber, private val soccerPlayByPlaysFetcher: SoccerPlayByPlaysFetcher, private val soccerPlayByPlaysSubscriber: SoccerPlayByPlaysSubscriber, private val playByPlaysLocalDataSource: PlayByPlaysLocalDataSource, private val localeUtility: LocaleUtility )</ID>
    <ID>LongParameterList:TeamHubRepository.kt$TeamHubRepository$( dispatcherProvider: DispatcherProvider, private val statsFetcher: TeamHubStatsFetcher, private val rosterFetcher: TeamHubRosterFetcher, private val standingsFetcher: TeamHubStandingsFetcher, private val statsLocalDataSource: TeamHubStatsLocalDataSource, private val rosterLocalDataSource: TeamHubRosterLocalDataSource, private val standingsLocalDataSource: TeamHubStandingsLocalDataSource )</ID>
    <ID>LongParameterList:TodaysGamesFetcher.kt$TodaysGamesFetcher$( dispatcherProvider: DispatcherProvider, private val scoresGraphqlApi: ScoresGraphqlApi, private val entityDataSource: EntityDataSource, private val feedLocalDataSource: FeedLocalDataSource, private val todaysGamesLocalDataSource: TodaysGamesLocalDataSource, private val supportedLeagues: SupportedLeagues )</ID>
    <ID>NestedBlockDepth:NewsResponseMappers.kt$@Suppress("LongMethod") private fun mapApolloNewsContentsToContents(newsContent: NewsItem): ArrayList&lt;NewsContent>?</ID>
  </CurrentIssues>
</SmellBaseline>
